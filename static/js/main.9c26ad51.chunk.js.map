{"version":3,"sources":["CoronaImage.png","api.js","Cards.js","MapD.js","ChartContinent.js","CountryPicker.js","BarChart.js","App.js","reportWebVitals.js","index.js"],"names":["url2","fetchData","a","axios","get","response","modifiedData","confirmed","data","cases","recovered","deaths","todayCases","fetchContinentData","console","log","map","dailyData","continent","fetchDataChangeable","country","changeableUrl","fetchCountriesData","latitude","countryInfo","lat","longitude","long","id","_id","Cards","props","useState","setDailyData","useEffect","fetchCAPI","style","padding","className","textAlign","width","fontSize","color","icon","faBriefcaseMedical","size","value","displayType","thousandSeparator","faSmile","faSkullCrossbones","faAmbulance","MapD","countryData","setCountryData","fetchCountAPI","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","d","i","Marker","position","Popup","ChartContinent","lineChart","length","labels","datasets","label","borderColor","fill","class","scope","CountryPicker","handleCountryChange","defaultValue","onChange","e","target","BarChart","barChart","backgroundColor","options","legend","display","title","text","App","state","fetchedData","setState","fetchedCData","this","src","CoronaImage","alt","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c26ad51.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/CoronaImage.9e5d4fc7.png\";","import axios from 'axios'\n\nconst url1 = 'https://disease.sh/v3/covid-19/continents'\nconst url2 = 'https://disease.sh/v3/covid-19'\nconst url3 = 'https://disease.sh/v3/covid-19/countries'\nconst url = 'https://disease.sh/v3/covid-19/all'\n\n\nexport const fetchData = async () => {\n    try {\n        const response = await axios.get(url)\n\n        const modifiedData = {\n            confirmed: response.data.cases,\n            recovered: response.data.recovered,\n            deaths: response.data.deaths,\n            todayCases: response.data.todayCases\n        }\n        return modifiedData\n    } catch (error) {\n\n    }\n}\n\nexport const fetchContinentData = async () => {\n    try {\n        const response = await axios.get(url1)\n        console.log(response.data)\n        const modifiedData = response.data.map((dailyData) => ({\n            cases: dailyData.cases,\n            recovered: dailyData.recovered,\n            deaths: dailyData.deaths,\n            continent: dailyData.continent\n        }))\n        return modifiedData\n\n    } catch (error) {\n\n    }\n}\n\nexport const fetchDataChangeable = async (country) => {\n    let changeableUrl = `${url2}/countries/India`\n\n    if (country) {\n        changeableUrl = `${url2}/countries/${country}`\n    }\n    try {\n        const response = await axios.get(changeableUrl)\n        console.log(\"response\", response.data)\n        const modifiedData = {\n            confirmed: response.data.cases,\n            recovered: response.data.recovered,\n            deaths: response.data.deaths,\n            todayCases: response.data.todayCases,\n            country: response.data.country\n        }\n        console.log(\"changeable\", modifiedData)\n        return modifiedData\n    } catch (error) {\n\n    }\n}\n\nexport const fetchCountriesData = async () => {\n    try {\n        const response = await axios.get(url3)\n        console.log(response.data)\n        const modifiedData = response.data.map((dailyData) => ({\n            country: dailyData.country,\n            confirmed: dailyData.cases,\n            recovered: dailyData.recovered,\n            deaths: dailyData.deaths,\n            latitude: dailyData.countryInfo.lat,\n            longitude: dailyData.countryInfo.long,\n            id: dailyData.countryInfo._id\n        }))\n        return modifiedData\n\n        // const response = await axios.get(url2)\n        // console.log(response.data)\n        // const modifiedData = response.data.map((ctry) => ctry.country)\n        // return modifiedData\n\n    } catch (error) {\n\n    }\n}\n","import React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSmile, faBriefcaseMedical, faSkullCrossbones, faAmbulance } from '@fortawesome/free-solid-svg-icons'\nimport NumberFormat from 'react-number-format';\nimport { fetchData } from './api'\n\nconst Cards = (props) => {\n    console.log(props)\n    const [dailyData, setDailyData] = useState([])\n\n    useEffect(() => {\n        const fetchCAPI = async () => {\n            const data = await fetchData()\n            setDailyData(data)\n        }\n\n        fetchCAPI()\n    }, [])\n\n    console.log(dailyData)\n    return (\n        <div style={{ padding: \"40px 0\" }}>\n            <div className=\"container\">\n                <h3 style={{ padding: \"20px 0\", textAlign: \"center\" }}>Total Global Stats</h3>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div className=\"card bgConfirmedCard\" style={{ width: \"100%\", textAlign: \"center\", padding: \"20px 0\" }}>\n\n                            <div style={{ fontSize: 34, color: \"red\" }}>\n                                <FontAwesomeIcon icon={faBriefcaseMedical} size={\"2x\"} />\n                            </div>\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Total Confirmed</h5>\n                                <h6 className=\"card-subtitle mb-2 text-muted\">\n\n                                    <NumberFormat value={dailyData.confirmed} displayType={'text'} thousandSeparator={true} />\n\n\n                                </h6>\n\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col\">\n                        <div className=\"card bgRecoveredCard\" style={{ width: \"100%\", textAlign: \"center\", padding: \"20px 0\" }}>\n                            <div style={{ fontSize: 34, color: \"orange\" }}>\n                                <FontAwesomeIcon icon={faSmile} size={\"2x\"} />\n                            </div>\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Total Recovered</h5>\n                                <h6 className=\"card-subtitle mb-2 text-muted\">\n\n                                    <NumberFormat value={dailyData.recovered} displayType={'text'} thousandSeparator={true} />\n\n                                </h6>\n\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col\">\n                        <div className=\"card bgDeathsCard\" style={{ width: \"100%\", textAlign: \"center\", padding: \"20px 0\" }}>\n                            <div style={{ fontSize: 34, color: \"black\" }}>\n                                <FontAwesomeIcon icon={faSkullCrossbones} size={\"2x\"} />\n                            </div>\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Total Deaths</h5>\n                                <h6 className=\"card-subtitle mb-2 text-muted\">\n\n\n                                    <NumberFormat value={dailyData.deaths} displayType={'text'} thousandSeparator={true} />\n\n                                </h6>\n\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col\">\n                        <div className=\"card bgConfirmedCard\" style={{ width: \"100%\", textAlign: \"center\", padding: \"20px 0\" }}>\n                            <div style={{ fontSize: 34, color: \"red\" }}>\n                                <FontAwesomeIcon icon={faAmbulance} size={\"2x\"} />\n                            </div>\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Total Today Cases</h5>\n                                <h6 className=\"card-subtitle mb-2 text-muted\">\n\n\n                                    <NumberFormat value={dailyData.todayCases} displayType={'text'} thousandSeparator={true} />\n\n                                </h6>\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Cards","import React, { useState, useEffect } from 'react'\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\nimport { fetchCountriesData } from './api'\nimport NumberFormat from 'react-number-format';\n\nfunction MapD() {\n\n    const [countryData, setCountryData] = useState([])\n\n    useEffect(() => {\n        const fetchCountAPI = async () => {\n            const data = await fetchCountriesData()\n            setCountryData(data)\n        }\n\n        fetchCountAPI()\n    }, [setCountryData])\n    console.log(\"mapd\", countryData)\n\n    return (\n        <MapContainer center={[20.5937, 78.9629]} zoom={4} scrollWheelZoom={true}>\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n\n            {countryData.map((d, i) => (\n\n                <Marker\n                    key={i}\n                    position={[d.latitude, d.longitude]} >\n                    <Popup position={[d.latitude, d.longitude]}>\n                        <div>\n                            <p>Country: {d.country}</p>\n                            <p>Confirmed: <NumberFormat value={d.confirmed} displayType={'text'} thousandSeparator={true} /></p>\n                            <p>Recovered: <NumberFormat value={d.recovered} displayType={'text'} thousandSeparator={true} /></p>\n                            <p>Deaths: <NumberFormat value={d.deaths} displayType={'text'} thousandSeparator={true} /></p>\n                        </div>\n                    </Popup>\n                </Marker>\n\n            ))}\n\n        </MapContainer >\n\n    )\n}\n\nexport default MapD","import React, { useState, useEffect } from 'react';\nimport { fetchContinentData } from './api'\nimport { Line } from 'react-chartjs-2'\nimport NumberFormat from 'react-number-format';\n\nconst ChartContinent = () => {\n    const [dailyData, setDailyData] = useState([])\n\n    useEffect(() => {\n        const fetchCAPI = async () => {\n            const data = await fetchContinentData()\n            setDailyData(data)\n        }\n        console.log(dailyData)\n        fetchCAPI()\n    }, [])\n\n    const lineChart = (\n        dailyData.length ? (\n            <Line\n                data={{\n                    labels: dailyData.map(({ continent }) => continent),\n                    datasets: [\n                        {\n                            data: dailyData.map(({ cases }) => cases),\n                            label: 'Active',\n                            borderColor: 'red',\n                            fill: true\n                        }, {\n                            data: dailyData.map(({ recovered }) => recovered),\n                            label: 'Recovered',\n                            borderColor: 'orange',\n                            fill: true\n                        }, {\n                            data: dailyData.map(({ deaths }) => deaths),\n                            label: 'Deaths',\n                            borderColor: 'black',\n                            fill: true\n                        }]\n                }}\n\n            />) :\n            \"Loading\"\n    )\n\n    return (\n        <div className=\"linechart\">\n            <h3 style={{ padding: \"20px 0\", textAlign: \"center\" }}>Covid-19 Continent Stats</h3>\n\n            <table class=\"table\">\n                <thead>\n                    <tr>\n\n                        <th scope=\"col\" style={{ color: 'green' }}>Continent</th>\n                        <th scope=\"col\" style={{ color: 'red' }}>Confirmed</th>\n                        <th scope=\"col\" style={{ color: 'orange' }}>Recovered</th>\n                        <th scope=\"col\">Deaths</th>\n                    </tr>\n                </thead>\n                {dailyData.map((d, i) => (\n                    <tbody key={i}>\n                        <tr>\n\n                            <td style={{ color: 'green' }}>  {d.continent}  </td>\n                            <td style={{ color: 'red' }}><NumberFormat value={d.cases} displayType={'text'} thousandSeparator={true} /> </td>\n                            <td style={{ color: 'orange' }}><NumberFormat value={d.recovered} displayType={'text'} thousandSeparator={true} /> </td>\n                            <td><NumberFormat value={d.deaths} displayType={'text'} thousandSeparator={true} /></td>\n                        </tr>\n                    </tbody>\n                ))}\n            </table>\n            <h3 style={{ padding: \"20px 0\", textAlign: \"center\" }}>Covid-19 Continent Line Graph</h3>\n            {lineChart}\n        </div>\n    )\n}\n\nexport default ChartContinent","import React, { useState, useEffect } from 'react'\nimport { fetchCountriesData } from './api'\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    const [countryData, setCountryData] = useState([])\n\n    useEffect(() => {\n        const fetchCountAPI = async () => {\n            const data = await fetchCountriesData()\n            setCountryData(data)\n        }\n\n        fetchCountAPI()\n    }, [setCountryData])\n    console.log(countryData)\n\n    return (\n        <div>\n            <form>\n                <div className=\"form-group\">\n                    <label style={{ padding: \"20px 0 0 0\", textAlign: \"center\" }}>Country select</label>\n                    <select className=\"form-control countrySelect\" defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n                        <option value=\"global\">India</option>\n                        {countryData.map((country, i) =>\n                            <option key={i} value={country.country}>{country.country}</option>\n                        )}\n\n                    </select>\n                </div>\n\n\n            </form>\n        </div>\n    )\n}\n\nexport default CountryPicker","import React, { useState, useEffect } from 'react';\nimport { fetchDataChangeable } from './api'\nimport { Bar } from 'react-chartjs-2'\n\nconst BarChart = (props) => {\n    const [dailyData, setDailyData] = useState([])\n\n    useEffect(() => {\n        const fetchCAPI = async () => {\n            const data = await fetchDataChangeable()\n            setDailyData(data)\n        }\n\n        fetchCAPI()\n    }, [])\n\n    console.log(props.data.confirmed)\n\n    // const lineChart = (\n    //     dailyData.length ? (\n    //         <Line\n    //             data={{\n    //                 labels: dailyData.map(({ continent }) => continent),\n    //                 datasets: [\n    //                     {\n    //                         data: dailyData.map(({ cases }) => cases),\n    //                         label: 'Active',\n    //                         borderColor: 'red',\n    //                         fill: true\n    //                     }, {\n    //                         data: dailyData.map(({ recovered }) => recovered),\n    //                         label: 'Recovered',\n    //                         borderColor: 'green',\n    //                         fill: true\n    //                     }, {\n    //                         data: dailyData.map(({ deaths }) => deaths),\n    //                         label: 'Deaths',\n    //                         borderColor: 'black',\n    //                         fill: true\n    //                     }]\n    //             }}\n\n    //         />) :\n    //         \"Loading\"\n    // )\n\n    const barChart = (\n\n        <Bar\n            data={{\n                labels: ['Confirmed', 'Recovered', 'Deaths'],\n                datasets: [{\n                    label: 'Total People Infected by Covid-19 stats',\n                    backgroundColor: ['red', 'orange', 'black'],\n                    data: [props.data.confirmed, props.data.recovered, props.data.deaths]\n                }]\n            }}\n\n            options={{\n                legend: { display: false },\n                title: { display: true, text: `Current state in ${props.country}` }\n            }}\n        />\n\n    )\n\n    return (\n        <div className=\"linechart\">\n            <h3 style={{ padding: \"0px 0 20px 0\", textAlign: \"center\" }}>Covid-19 Stats for {props.data.country} </h3>\n\n\n\n            <table class=\"table\">\n                <thead>\n                    <tr>\n                        <th scope=\"col\" style={{ color: 'green' }}>{props.data.country}</th>\n                        <th scope=\"col\" style={{ color: 'red' }}>Confirmed</th>\n                        <th scope=\"col\" style={{ color: 'orange' }}>Recovered</th>\n                        <th scope=\"col\">Deaths</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <th scope=\"row\" style={{ color: 'green' }}>Data</th>\n                        <td style={{ color: 'red' }}>{props.data.confirmed} </td>\n                        <td style={{ color: 'orange' }}>{props.data.recovered} </td>\n                        <td>{props.data.deaths}</td>\n                    </tr>\n                </tbody>\n            </table>\n\n            {barChart}\n\n        </div>\n    )\n}\n\nexport default BarChart","import './App.css';\nimport React from 'react';\nimport CoronaImage from './CoronaImage.png'\nimport { fetchDataChangeable } from './api'\nimport Cards from './Cards';\nimport MapD from './MapD';\nimport ChartContinent from './ChartContinent';\nimport CountryPicker from './CountryPicker';\nimport BarChart from './BarChart';\n\n\nclass App extends React.Component {\n\n  state = {\n    data: {},\n    country: ''\n  }\n\n  // async componentDidMount() {\n  //   const fetchedData = await fetchData();\n  //   this.setState({ data: fetchedData })\n  //   console.log(this.state.data)\n  // }\n\n  async componentDidMount() {\n    const fetchedCData = await fetchDataChangeable();\n    this.setState({ data: fetchedCData })\n    console.log(this.state.data)\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchDataChangeable(country);\n    console.log(\"fetchedChange\", fetchedData)\n    this.setState({ data: fetchedData, country: country })\n    console.log(country)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"imgContainer\">\n          <img className=\"imageCss\" src={CoronaImage} alt='Corona' />\n        </div>\n\n\n        <Cards />\n        <ChartContinent />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <BarChart data={this.state.data} country={this.state.country} />\n        <h3 style={{ padding: \"20px 0\", textAlign: \"center\" }}>Map of Covid-19 Countries</h3>\n        <MapD />\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}